/******************************************************************************
 * @file: functions.c
 *
 * WISC NETID   hbian8
 * CANVAS USERNAME  HAOJI BIAN
 * WISC ID NUMBER   9082703456
 * OTHER COMMENTS FOR THE GRADER (OPTIONAL)
 *
 * @creator: Haoji Bian (hbian8@wisc.edu)
 * @modified: 10/05/2021
 *****************************************************************************/
#include <stdio.h>
#include "functions.h"

// Some macros that may be useful to you 
#define MAX_USERNAME_LEN    32
#define MAX_EMAIL_LEN       32
#define MAX_DOMAIN_LEN      64
#define MIN_PASSWORD_LEN    8
#define MAX_PASSWORD_LEN    16
#define NEW_LINE_CHAR       10

// Set this to 1 to enable dbgprintf statements, make sure to set it back to 0 
// before submitting!
#define DEBUG               0
#define dbgprintf(...)      if (DEBUG) { printf(__VA_ARGS__); }

/******************************************************************************
 * Helper functions
 *****************************************************************************/

// ADD ANY HELPER FUNCTIONS YOU MIGHT WRITE HERE
int Str_Length(char arg[])
{
    int i;
    for(i = 0; arg[i] != '\0'; i++)
    {

    }
    return i;
}

int Check_CharValid(char ch)
{
    if(!((ch >= '0' && ch <= '9') \
        || (ch <= 'Z' && ch >= 'A') || (ch <= 'z' && ch >= 'a')))
    {
        return 0;
    }
    else
    {
        return 1;
    }
}

int isLetter(char ch)
{
    if(!((ch <= 'Z' && ch >= 'A') || (ch <= 'z' && ch >= 'a')))
    {
        return 0;
    }
    else
    {
        return 1;
    }
}


int Str_Cmp(char ch1[], char ch2[])
{
    if(Str_Length(ch1) != Str_Length(ch2))
    {
        return 0;
    }
    else
    {
        for(int i = 0; i < Str_Length(ch1); i++)
        {
            if(ch1[i] != ch2[i])
            {
                return 0;
            }
        }
        return 1;
    }
}

int Check_Str_Valid(char str[])
{
    for(int i = 0; i < Str_Length(str); i++)
    {
        if(!Check_CharValid(str[i]))
        {
            return 0;
        }
    }
    return 1;
}

int ifContainsLetter(char ch[], char letter)
{
    for(int i = 0; i < Str_Length(ch); i++)
    {
        if(ch[i] == letter)
        {
            return 1;
        }
    }
    return 0;
}
// Examples: IsLetter, IsDigit, Length, Find...

/******************************************************************************
 * Verification functions
 *****************************************************************************/

/*
 * A username must begin with a letter [A-Z, a-z], contain 32 characters
 * or less, and  may only consist of letters, underscores, or 
 * digits [A-Z, a-z, _, 0-9]. An error message is displayed if any of 
 * these conditions are not met. Only print the first applicable error 
 * message. 
 *
 * @param user : The username string
 * @param len : Size of the username input buffer
 * @return 1 if valid, 0 if not
 */
int Verify_Username(char user[], size_t len) {

    /* BEGIN MODIFYING CODE HERE */
    dbgprintf("This line only prints if DEBUG is set to 1\n");
    int name_length = Str_Length(user);
    if(!((user[0] <= 'Z' && user[0] >= 'A') || (user[0] <= 'z' && user[0] >= 'a')))
    {
        printf(ERROR_01_USER_START_INVALID);
        return 0;
    }
    if(name_length > MAX_USERNAME_LEN)
    {
        printf(ERROR_02_USER_LEN_INVALID);
        return 0;
    }
    for(int i =0; i < name_length && i <len; i++)
    {
        if(!(user[i] == '_' || Check_CharValid(user[i])))
        {
            printf(ERROR_03_USER_CHARS_INVALID);
            return 0;
        }
    }
    /* END MODIFYING CODE HERE */
    printf(SUCCESS_1_USER);
    return 1;
}

/*
 * An email address has four parts:
 *      name
 *          exists
 *          must start with letter
 *          max 32 characters
 *          may contain only letters and digits
 *      @ symbol
 *          exists
 *      domain name
 *          exists
 *          max of 64 characters
 *          composed of one or more subdomains separated by .
 *          subdomain must begin with a letter
 *          subdomains may contain only letters and digits
 *      top-level domain 
 *          must be [.edu, .com, .net]
 *
 * If the email address contains one or more errors print only the first
 * applicable error from the list.
 *
 * Note this task is based on a real world problem and may not be the best 
 * order to approach writing the code.
 *
 * @param email : The email string
 * @param len : Size of the email input buffer
 * @return 1 if valid, 0 if not
 */
int Verify_Email(char email[], size_t len) {

    /* BEGIN MODIFYING CODE HERE */

    int TOP_DOMAIN_NUM  = 3;
    int contains_symbol = 0;
    int subdomain_num   = 0;
    int symbol_index;
    int TOP_DOMAIN_LENGTH   = 4;
    int contains_top_domain = 0;
    char name_buffer[len];
    int email_length = Str_Length(email);
    char* TOP_DOMAIN[] = {".net", ".com", ".edu"};
    int domain_length   = 0;
    char subdomain[MAX_DOMAIN_LEN][MAX_DOMAIN_LEN];
    if(email_length >= 4)
    {
        char* last_4letter = &email[email_length-TOP_DOMAIN_LENGTH];
        last_4letter[TOP_DOMAIN_LENGTH] = '\0';
        for(int i = 0; i < TOP_DOMAIN_NUM; i++)
        {
            if(Str_Cmp(last_4letter, TOP_DOMAIN[i]))
            {
                contains_top_domain = 1;
                break;
            }
        }
    }
    if(contains_top_domain)
    {
        int i;
        for(i = 0; (i < email_length - TOP_DOMAIN_LENGTH )&& (i < len); i++) {
            if (email[i] == '@') {
                contains_symbol = 1;
                symbol_index    = i;
                break;
            }
            name_buffer[i] = email[i];
        }
        name_buffer[i] = '\0';
    }
    else
    {
        int i;
        for(i = 0; i < email_length && i < len; i++) {
            if (email[i] == '@') {
                contains_symbol = 1;
                symbol_index    = i;
                break;
            }
            name_buffer[i] = email[i];
        }
        name_buffer[i] = '\0';
    }
    if(name_buffer[0] == '\0')
    {
        printf(ERROR_04_EMAIL_MISSING_NAME);  // example @domain.com
        return 0;
    }
    if(!isLetter(name_buffer[0]))
    {
        printf(ERROR_05_EMAIL_START_INVALID);
        return 0;
    }
    if(Str_Length(name_buffer) > MAX_EMAIL_LEN)
    {
        printf(ERROR_06_EMAIL_NAME_LEN_INVALID);
        return 0;
    }
    if(!Check_Str_Valid(name_buffer))
    {
        printf(ERROR_07_EMAIL_NAME_CHARS_INVALID);
        return 0;
    }
    if(!contains_symbol)
    {
        printf(ERROR_08_EMAIL_MISSING_SYMBOL); // example mike.wisc.edu
        return 0;
    }
    if(contains_top_domain != 0)
    {
        int subdomain_length = 0;
        for(int i = symbol_index + 1; (i < email_length - TOP_DOMAIN_LENGTH) && (i < len); i++)
        {
            domain_length++;
            if(email[i] == '.')
            {
                subdomain[subdomain_num][subdomain_length] = '\0';
                subdomain_num++;
                subdomain_length = 0;
                continue;
            }
            subdomain[subdomain_num][subdomain_length] = email[i];
            subdomain_length++;
        }
        subdomain[subdomain_num][subdomain_length] = '\0';
        subdomain_num++;
    }
    else
    {
        int subdomain_length = 0;
        for(int i = symbol_index + 1; (i < email_length) && (i < len); i++)
        {
            domain_length++;
            if(email[i] == '.')
            {
                subdomain[subdomain_num][subdomain_length] = '\0';
                subdomain_num++;
                subdomain_length = 0;
                continue;
            }
            subdomain[subdomain_num][subdomain_length] = email[i];
            subdomain_length++;
        }
        subdomain[subdomain_num][subdomain_length] = '\0';
        subdomain_num++;
    }
    if(domain_length == 0)
    {
        printf(ERROR_09_EMAIL_MISSING_DOMAIN); // example mike@.edu
        return 0;
    }
    if(domain_length > MAX_DOMAIN_LEN)
    {
        printf(ERROR_10_EMAIL_DOMAIN_LEN_INVALID);
        return 0;
    }
    for(int i = 0; i < subdomain_num; i++)
    {
        if(!isLetter(subdomain[i][0]))
        {
            printf(ERROR_11_EMAIL_DOMAIN_START_INVALID);
            return 0;
        }
    }
    for(int i = 0; i < subdomain_num; i++)
    {
        if(!Check_Str_Valid(subdomain[i]))
        {
            printf(ERROR_12_EMAIL_DOMAIN_CHARS_INVALID);
            return 0;
        }
    }
    if(contains_top_domain == 0)
    {
        printf(ERROR_13_TOP_LEVEL_DOMAIN_INVALID);
        return 0;
    }
    /* END MODIFYING CODE HERE */

    printf(SUCCESS_2_EMAIL);
    return 1;
}

/*
 * The following password requirements must be verified:
 *  - May use any character except spaces (i.e., "my password" is invalid)
 *  - Must contain at least 8 characters (i.e., "Password" has 8 characters 
 *    and is valid)
 *  - May have at most 16 characters (i.e., "1234567890Abcdef" has 16 
 *    characters and is valid)
 *  - Must contain at least one upper case character [A-Z]
 *  - Must contain at least one lower case character [a-z]
 *
 * @param pwd : The original password string
 * @param len : Size of the original password input buffer
 * @return 1 if valid, 0 if not
 */
int Verify_Password(char pwd[], size_t len) {

    /* BEGIN MODIFYING CODE HERE */
    int pwd_len = Str_Length(pwd);
    int contains_low_case = 0;
    int contains_up_case = 0;
    if(ifContainsLetter(pwd, ' '))
    {
        printf(ERROR_14_PWD_SPACES_INVALID);
        return 0;
    }
    if(pwd_len < 8)
    {
        printf(ERROR_15_PWD_MIN_LEN_INVALID);
        return 0;
    }
    if(pwd_len > 16)
    {
        printf(ERROR_16_PWD_MAX_LEN_INVALID);
        return 0;
    }
    for(int i = 0; i < pwd_len && i < len; i++)
    {
        if((pwd[i] <= 'Z') && (pwd[i] >= 'A'))
        {
            contains_up_case = 1;
        }
        if((pwd[i] <= 'z') && (pwd[i] >= 'a'))
        {
            contains_low_case = 1;
        }
    }
    if(!contains_up_case)
    {
        printf(ERROR_17_PWD_MIN_UPPER_INVALID);
        return 0;
    }
    if(!contains_low_case)
    {
        printf(ERROR_18_PWD_MIN_LOWER_INVALID);
        return 0;
    }
    /* END MODIFYING CODE HERE */

    return 1;
}
/*
 * Original Password and the Reentered Password must match
 *
 * @param pwd1 : The original password string
 * @param len1 : Size of the original password input buffer
 * @param pwd2 : The reentered password string
 * @param len2 : Size of the renetered password input buffer
 * @return 1 if valid, 0 if not
 */
int Verify_Passwords_Match(char pwd1[], size_t len1, char pwd2[], size_t len2) {

    /* BEGIN MODIFYING CODE HERE */
    
    if(!Str_Cmp(pwd1, pwd2) || Str_Length(pwd1) > len1 || Str_Length(pwd2) > len2)
    {
        printf(ERROR_19_PWD_MATCH_INVALID);
        return 0;
    }
    /* END MODIFYING CODE HERE */

    printf(SUCCESS_3_PASSWORDS);
    return 1;
}

/******************************************************************************
 * I/O functions
 *****************************************************************************/

/*
 * Prompts user with an input and reads response from stdin
 *
 * @param message : Prompt displayed to the user
 * @param data : char array to hold user repsonse
 * @param MAX_LENGTH : Size of user response input buffer
 */
void Get_User_Data(char *message, char *data, const int MAX_LENGTH) {
    printf("%s", message);
    fgets(data, MAX_LENGTH, stdin);
    /* BEGIN MODIFYING CODE HERE */
    while(*data != '\n')
    {
        data++;
    }
    *data = '\0';
    /* END MODIFYING CODE HERE */
    return;
}
